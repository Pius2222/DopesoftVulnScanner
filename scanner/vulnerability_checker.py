import re
from typing import List, Dict, Any
import logging

class VulnerabilityChecker:
    """Basic vulnerability checker for common services and configurations"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.vulnerability_db = self._load_vulnerability_patterns()
    
    def _load_vulnerability_patterns(self) -> Dict[str, List[Dict]]:
        """Load vulnerability patterns for common services and attack vectors"""
        return {
            'ssh': [
                {
                    'pattern': r'OpenSSH[_\s]+([0-6]\.|7\.[0-3])',
                    'name': 'Outdated SSH Version',
                    'severity': 'medium',
                    'description': 'SSH version may contain known vulnerabilities',
                    'recommendation': 'Update to latest OpenSSH version'
                },
                {
                    'pattern': r'protocol.*1',
                    'name': 'SSH Protocol 1 Enabled',
                    'severity': 'high',
                    'description': 'SSH Protocol 1 is deprecated and insecure',
                    'recommendation': 'Disable SSH Protocol 1'
                },
                {
                    'pattern': r'.*',
                    'name': 'SSH Brute-Force Attack Vector',
                    'severity': 'medium',
                    'description': 'SSH service exposed to potential brute-force attacks',
                    'recommendation': 'Implement fail2ban, rate limiting, and key-based authentication'
                }
            ],
            'http': [
                {
                    'pattern': r'Server:.*Apache/([12]\.|2\.[0-4]\.)',
                    'name': 'Outdated Apache Version',
                    'severity': 'medium',
                    'description': 'Apache version may contain security vulnerabilities',
                    'recommendation': 'Update Apache to latest stable version'
                },
                {
                    'pattern': r'Server:.*nginx/([01]\.|1\.[0-9]\.|1\.1[0-4]\.)',
                    'name': 'Outdated Nginx Version',
                    'severity': 'medium',
                    'description': 'Nginx version may contain security vulnerabilities',
                    'recommendation': 'Update Nginx to latest stable version'
                },
                {
                    'pattern': r'Server:.*IIS/[56]',
                    'name': 'Outdated IIS Version',
                    'severity': 'high',
                    'description': 'IIS version contains known security vulnerabilities',
                    'recommendation': 'Upgrade to newer IIS version'
                },
                {
                    'pattern': r'.*',
                    'name': 'Web Application Attack Vectors',
                    'severity': 'high',
                    'description': 'HTTP service vulnerable to XSS, CSRF, SQL Injection, and other web attacks',
                    'recommendation': 'Implement WAF, input validation, CSRF tokens, and security headers'
                }
            ],
            'https': [
                {
                    'pattern': r'.*',
                    'name': 'HTTPS/TLS Attack Vectors',
                    'severity': 'medium',
                    'description': 'HTTPS service may be vulnerable to Man-in-the-Middle attacks with weak ciphers',
                    'recommendation': 'Use strong TLS versions (1.2+), implement HSTS, and certificate pinning'
                }
            ],
            'ftp': [
                {
                    'pattern': r'vsftpd.*2\.[0-2]\.',
                    'name': 'Outdated vsftpd Version',
                    'severity': 'medium',
                    'description': 'vsftpd version may contain security vulnerabilities',
                    'recommendation': 'Update vsftpd to latest version'
                },
                {
                    'pattern': r'ProFTPD.*1\.[23]\.',
                    'name': 'Outdated ProFTPD Version',
                    'severity': 'high',
                    'description': 'ProFTPD version contains known vulnerabilities',
                    'recommendation': 'Update ProFTPD to latest stable version'
                },
                {
                    'pattern': r'.*',
                    'name': 'FTP Directory Traversal Risk',
                    'severity': 'high',
                    'description': 'FTP service may allow directory traversal attacks',
                    'recommendation': 'Configure proper access controls and chroot jails'
                }
            ],
            'smtp': [
                {
                    'pattern': r'Postfix.*[12]\.',
                    'name': 'Outdated Postfix Version',
                    'severity': 'medium',
                    'description': 'Postfix version may contain security issues',
                    'recommendation': 'Update Postfix to latest version'
                },
                {
                    'pattern': r'.*',
                    'name': 'SMTP Command Injection Risk',
                    'severity': 'medium',
                    'description': 'SMTP service may be vulnerable to command injection attacks',
                    'recommendation': 'Implement proper input sanitization and rate limiting'
                }
            ],
            'mysql': [
                {
                    'pattern': r'MySQL.*[45]\.',
                    'name': 'Outdated MySQL Version',
                    'severity': 'high',
                    'description': 'MySQL version contains known security vulnerabilities',
                    'recommendation': 'Upgrade MySQL to version 8.0 or later'
                },
                {
                    'pattern': r'.*',
                    'name': 'SQL Injection Attack Vector',
                    'severity': 'critical',
                    'description': 'Database service exposed to potential SQL injection attacks',
                    'recommendation': 'Use parameterized queries, input validation, and database firewalls'
                }
            ],
            'postgresql': [
                {
                    'pattern': r'.*',
                    'name': 'SQL Injection Attack Vector',
                    'severity': 'critical',
                    'description': 'PostgreSQL service exposed to potential SQL injection attacks',
                    'recommendation': 'Use parameterized queries, input validation, and restrict network access'
                }
            ],
            'ldap': [
                {
                    'pattern': r'.*',
                    'name': 'LDAP Injection Attack Vector',
                    'severity': 'high',
                    'description': 'LDAP service vulnerable to injection attacks',
                    'recommendation': 'Implement proper LDAP query sanitization and access controls'
                }
            ],
            'dns': [
                {
                    'pattern': r'.*',
                    'name': 'DNS Spoofing Attack Vector',
                    'severity': 'medium',
                    'description': 'DNS service may be vulnerable to spoofing and cache poisoning',
                    'recommendation': 'Implement DNSSEC, restrict zone transfers, and use secure DNS'
                }
            ],
            'telnet': [
                {
                    'pattern': r'.*',
                    'name': 'Telnet Service Detected',
                    'severity': 'critical',
                    'description': 'Telnet transmits data in plaintext and is highly insecure',
                    'recommendation': 'Disable Telnet and use SSH instead'
                }
            ],
            'web': [
                {
                    'pattern': r'.*php.*',
                    'name': 'PHP Local/Remote File Inclusion Risk',
                    'severity': 'high',
                    'description': 'PHP application may be vulnerable to LFI/RFI attacks',
                    'recommendation': 'Disable dangerous PHP functions, validate file paths, and use whitelisting'
                },
                {
                    'pattern': r'.*upload.*',
                    'name': 'Malware Upload Risk',
                    'severity': 'high',
                    'description': 'File upload functionality detected - potential malware upload vector',
                    'recommendation': 'Implement file type validation, antivirus scanning, and sandboxing'
                }
            ]
        }
    
    def check_service_vulnerabilities(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check a service for known vulnerabilities"""
        vulnerabilities = []
        
        service_name = service_info.get('service', '').lower()
        banner = service_info.get('banner', '')
        version = service_info.get('version', '')
        product = service_info.get('product', '')
        port = service_info.get('port')
        
        # Combine all service information for pattern matching
        service_text = f"{banner} {version} {product}".lower()
        
        try:
            # Check for common insecure ports
            if port is not None:
                insecure_ports = self._check_insecure_ports(port)
                if insecure_ports:
                    vulnerabilities.extend(insecure_ports)
            
            # Check service-specific vulnerabilities
            if service_name in self.vulnerability_db:
                for vuln_pattern in self.vulnerability_db[service_name]:
                    if re.search(vuln_pattern['pattern'], service_text, re.IGNORECASE):
                        vulnerability = {
                            'name': vuln_pattern['name'],
                            'severity': vuln_pattern['severity'],
                            'description': vuln_pattern['description'],
                            'recommendation': vuln_pattern['recommendation'],
                            'port': port,
                            'service': service_name,
                            'cve': vuln_pattern.get('cve', '')
                        }
                        vulnerabilities.append(vulnerability)
            
            # Check for injection attack vectors
            injection_vulns = self._check_injection_vulnerabilities(service_info)
            if injection_vulns:
                vulnerabilities.extend(injection_vulns)
            
            # Check for file inclusion vulnerabilities
            file_vulns = self._check_file_inclusion_vulnerabilities(service_info)
            if file_vulns:
                vulnerabilities.extend(file_vulns)
            
            # Check for default credentials
            default_creds = self._check_default_credentials(service_info)
            if default_creds:
                vulnerabilities.extend(default_creds)
            
            # Check for SSL/TLS issues
            ssl_issues = self._check_ssl_issues(service_info)
            if ssl_issues:
                vulnerabilities.extend(ssl_issues)
            
            # Check for information disclosure
            info_disclosure = self._check_information_disclosure(service_info)
            if info_disclosure:
                vulnerabilities.extend(info_disclosure)
            
            # Check for DoS/DDoS vulnerabilities
            dos_vulns = self._check_dos_vulnerabilities(service_info)
            if dos_vulns:
                vulnerabilities.extend(dos_vulns)
            
            # Check for session-related vulnerabilities
            session_vulns = self._check_session_vulnerabilities(service_info)
            if session_vulns:
                vulnerabilities.extend(session_vulns)
            
            # Check for business logic vulnerabilities
            logic_vulns = self._check_business_logic_vulnerabilities(service_info)
            if logic_vulns:
                vulnerabilities.extend(logic_vulns)
            
            # Check for network-level attack vectors
            network_vulns = self._check_network_attack_vectors(service_info)
            if network_vulns:
                vulnerabilities.extend(network_vulns)
                
        except Exception as e:
            self.logger.error(f"Error checking vulnerabilities for service {service_name}: {e}")
        
        return vulnerabilities
    
    def _check_insecure_ports(self, port: int) -> List[Dict[str, Any]]:
        """Check for commonly insecure ports"""
        insecure_ports = {
            21: {
                'name': 'FTP Service Detected',
                'severity': 'medium',
                'description': 'FTP transmits credentials in plaintext',
                'recommendation': 'Use SFTP or FTPS instead of plain FTP'
            },
            23: {
                'name': 'Telnet Service Detected',
                'severity': 'critical',
                'description': 'Telnet transmits all data including credentials in plaintext',
                'recommendation': 'Disable Telnet and use SSH instead'
            },
            53: {
                'name': 'DNS Service on Non-Standard Host',
                'severity': 'low',
                'description': 'DNS service may be misconfigured or allow zone transfers',
                'recommendation': 'Ensure DNS is properly configured and secured'
            },
            135: {
                'name': 'RPC Endpoint Mapper',
                'severity': 'medium',
                'description': 'RPC services may be vulnerable to various attacks',
                'recommendation': 'Disable unnecessary RPC services'
            },
            139: {
                'name': 'NetBIOS Session Service',
                'severity': 'medium',
                'description': 'NetBIOS may allow information disclosure',
                'recommendation': 'Disable NetBIOS if not required'
            },
            445: {
                'name': 'SMB Service Detected',
                'severity': 'medium',
                'description': 'SMB service may be vulnerable to various attacks',
                'recommendation': 'Ensure SMB is properly configured and patched'
            },
            1433: {
                'name': 'MSSQL Server Detected',
                'severity': 'medium',
                'description': 'Database service exposed to network',
                'recommendation': 'Restrict database access and use strong authentication'
            },
            3389: {
                'name': 'RDP Service Detected',
                'severity': 'high',
                'description': 'RDP is commonly targeted by attackers',
                'recommendation': 'Use VPN or restrict RDP access by IP'
            }
        }
        
        if port in insecure_ports:
            vuln = insecure_ports[port].copy()
            vuln['port'] = str(port)
            return [vuln]
        
        return []
    
    def _check_default_credentials(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for services that commonly have default credentials"""
        vulnerabilities = []
        service_name = service_info.get('service', '').lower()
        port = service_info.get('port')
        
        # Common services with default credentials
        default_cred_services = {
            'http': ['admin/admin', 'admin/password', 'root/root'],
            'ssh': ['root/root', 'admin/admin'],
            'ftp': ['anonymous/anonymous', 'ftp/ftp'],
            'mysql': ['root/', 'mysql/mysql'],
            'postgresql': ['postgres/postgres'],
            'mongodb': ['admin/admin'],
            'redis': ['no authentication'],
            'elasticsearch': ['no authentication']
        }
        
        if service_name in default_cred_services:
            vulnerabilities.append({
                'name': f'Potential Default Credentials - {service_name.upper()}',
                'severity': 'high',
                'description': f'{service_name.upper()} service may be using default credentials',
                'recommendation': f'Change default credentials for {service_name.upper()} service',
                'port': port,
                'service': service_name
            })
        
        return vulnerabilities
    
    def _check_ssl_issues(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for SSL/TLS related issues"""
        vulnerabilities = []
        port = service_info.get('port')
        banner = service_info.get('banner', '').lower()
        
        # Check for weak SSL/TLS versions
        weak_ssl_patterns = [
            (r'sslv[23]', 'Weak SSL Version', 'high', 'SSL v2/v3 protocols are deprecated and insecure'),
            (r'tlsv1\.0', 'Weak TLS Version', 'medium', 'TLS v1.0 is deprecated, use TLS v1.2 or higher'),
            (r'rc4', 'Weak Cipher Suite', 'medium', 'RC4 cipher is weak and should be disabled')
        ]
        
        for pattern, name, severity, description in weak_ssl_patterns:
            if re.search(pattern, banner):
                vulnerabilities.append({
                    'name': name,
                    'severity': severity,
                    'description': description,
                    'recommendation': 'Configure stronger SSL/TLS protocols and cipher suites',
                    'port': port,
                    'service': service_info.get('service', '')
                })
        
        return vulnerabilities
    
    def _check_information_disclosure(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for information disclosure vulnerabilities"""
        vulnerabilities = []
        banner = service_info.get('banner', '').lower()
        port = service_info.get('port')
        service = service_info.get('service', '')
        
        # Check for verbose banners that disclose version information
        if any(keyword in banner for keyword in ['version', 'apache', 'nginx', 'iis', 'openssh']):
            # Only flag if it's a detailed version disclosure
            version_patterns = [
                r'apache/[\d.]+',
                r'nginx/[\d.]+',
                r'openssh_[\d.]+',
                r'microsoft-iis/[\d.]+'
            ]
            
            for pattern in version_patterns:
                if re.search(pattern, banner):
                    vulnerabilities.append({
                        'name': 'Version Information Disclosure',
                        'severity': 'low',
                        'description': 'Service banner reveals detailed version information',
                        'recommendation': 'Configure service to hide version information in banners',
                        'port': port,
                        'service': service
                    })
                    break
        
        return vulnerabilities
    
    def _check_dos_vulnerabilities(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for Denial of Service vulnerabilities"""
        vulnerabilities = []
        service = service_info.get('service', '').lower()
        port = service_info.get('port')
        
        # Services commonly vulnerable to DoS attacks
        dos_vulnerable_services = {
            'http': 'Web server may be vulnerable to HTTP flood attacks',
            'https': 'HTTPS service may be vulnerable to SSL exhaustion attacks',
            'ftp': 'FTP service may be vulnerable to connection exhaustion',
            'smtp': 'SMTP service may be vulnerable to email flood attacks',
            'dns': 'DNS service may be vulnerable to amplification attacks',
            'ntp': 'NTP service may be used for DDoS amplification attacks',
            'snmp': 'SNMP service may be vulnerable to amplification attacks'
        }
        
        if service in dos_vulnerable_services:
            vulnerabilities.append({
                'name': f'DoS/DDoS Attack Vector - {service.upper()}',
                'severity': 'medium',
                'description': dos_vulnerable_services[service],
                'recommendation': 'Implement rate limiting, DDoS protection, and traffic monitoring',
                'port': port,
                'service': service
            })
        
        return vulnerabilities
    
    def _check_session_vulnerabilities(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for session-related vulnerabilities"""
        vulnerabilities = []
        service = service_info.get('service', '').lower()
        port = service_info.get('port')
        banner = service_info.get('banner', '').lower()
        
        # Web services are vulnerable to session attacks
        if service in ['http', 'https'] or port in [80, 443, 8080, 8443]:
            vulnerabilities.extend([
                {
                    'name': 'Session Hijacking Risk',
                    'severity': 'high',
                    'description': 'Web application may be vulnerable to session hijacking attacks',
                    'recommendation': 'Use secure session tokens, HTTPS only, and implement session rotation',
                    'port': port,
                    'service': service
                },
                {
                    'name': 'Cross-Site Request Forgery (CSRF) Risk',
                    'severity': 'high',
                    'description': 'Web application may be vulnerable to CSRF attacks',
                    'recommendation': 'Implement CSRF tokens, SameSite cookies, and origin validation',
                    'port': port,
                    'service': service
                },
                {
                    'name': 'Cross-Site Scripting (XSS) Risk',
                    'severity': 'high',
                    'description': 'Web application may be vulnerable to XSS attacks',
                    'recommendation': 'Implement input sanitization, output encoding, and CSP headers',
                    'port': port,
                    'service': service
                }
            ])
        
        # Check for credential stuffing vulnerabilities
        if service in ['http', 'https', 'ftp', 'ssh', 'telnet']:
            vulnerabilities.append({
                'name': 'Credential Stuffing Attack Vector',
                'severity': 'medium',
                'description': f'{service.upper()} service may be vulnerable to credential stuffing attacks',
                'recommendation': 'Implement account lockout, CAPTCHA, and multi-factor authentication',
                'port': port,
                'service': service
            })
        
        return vulnerabilities
    
    def _check_business_logic_vulnerabilities(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for business logic vulnerabilities"""
        vulnerabilities = []
        service = service_info.get('service', '').lower()
        port = service_info.get('port')
        
        # Web applications are most susceptible to business logic attacks
        if service in ['http', 'https'] or port in [80, 443, 8080, 8443]:
            vulnerabilities.append({
                'name': 'Business Logic Attack Risk',
                'severity': 'medium',
                'description': 'Web application may contain flawed business logic vulnerable to exploitation',
                'recommendation': 'Conduct thorough business logic testing and implement proper validation',
                'port': port,
                'service': service
            })
        
        return vulnerabilities
    
    def _check_network_attack_vectors(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for network-level attack vectors"""
        vulnerabilities = []
        service = service_info.get('service', '').lower()
        port = service_info.get('port')
        
        # ARP spoofing risks for network services
        if service in ['http', 'https', 'ftp', 'ssh', 'telnet', 'smtp']:
            vulnerabilities.append({
                'name': 'ARP Spoofing Attack Vector',
                'severity': 'medium',
                'description': 'Network service may be vulnerable to ARP spoofing attacks',
                'recommendation': 'Implement ARP inspection, network segmentation, and monitoring',
                'port': port,
                'service': service
            })
        
        # DNS-related services vulnerable to DNS spoofing
        if service == 'dns' or port == 53:
            vulnerabilities.append({
                'name': 'DNS Spoofing Attack Vector',
                'severity': 'medium',
                'description': 'DNS service vulnerable to spoofing and cache poisoning attacks',
                'recommendation': 'Implement DNSSEC, secure DNS resolution, and monitoring',
                'port': port,
                'service': service
            })
        
        return vulnerabilities
    
    def _check_injection_vulnerabilities(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for various injection attack vulnerabilities"""
        vulnerabilities = []
        service = service_info.get('service', '').lower()
        port = service_info.get('port')
        banner = service_info.get('banner', '').lower()
        
        # SQL Injection vulnerabilities
        if service in ['mysql', 'postgresql', 'mssql', 'oracle'] or port in [1433, 3306, 5432, 1521]:
            vulnerabilities.append({
                'name': 'SQL Injection Attack Vector',
                'severity': 'critical',
                'description': 'Database service exposed and potentially vulnerable to SQL injection attacks',
                'recommendation': 'Use parameterized queries, input validation, stored procedures, and database firewalls',
                'port': port,
                'service': service
            })
        
        # Web applications vulnerable to multiple injection types
        if service in ['http', 'https'] or port in [80, 443, 8080, 8443]:
            vulnerabilities.extend([
                {
                    'name': 'SQL Injection Risk - Web Application',
                    'severity': 'critical',
                    'description': 'Web application may be vulnerable to SQL injection through user inputs',
                    'recommendation': 'Implement parameterized queries, input validation, and WAF protection',
                    'port': port,
                    'service': service
                },
                {
                    'name': 'Command Injection Risk',
                    'severity': 'critical',
                    'description': 'Web application may allow command injection through user inputs',
                    'recommendation': 'Sanitize inputs, use safe APIs, avoid system calls with user data',
                    'port': port,
                    'service': service
                },
                {
                    'name': 'Cross-Site Scripting (XSS) Vulnerability',
                    'severity': 'high',
                    'description': 'Web application vulnerable to XSS attacks through unsanitized user inputs',
                    'recommendation': 'Implement output encoding, input validation, and CSP headers',
                    'port': port,
                    'service': service
                }
            ])
        
        # LDAP Injection for directory services
        if service == 'ldap' or port in [389, 636]:
            vulnerabilities.append({
                'name': 'LDAP Injection Attack Vector',
                'severity': 'high',
                'description': 'LDAP service vulnerable to injection attacks through search filters',
                'recommendation': 'Implement proper LDAP query sanitization and input validation',
                'port': port,
                'service': service
            })
        
        # Command injection for services that execute commands
        if service in ['ssh', 'telnet', 'rsh'] or port in [22, 23, 514]:
            vulnerabilities.append({
                'name': 'Remote Command Injection Risk',
                'severity': 'critical',
                'description': 'Remote access service may allow command injection attacks',
                'recommendation': 'Implement command filtering, input sanitization, and access controls',
                'port': port,
                'service': service
            })
        
        return vulnerabilities
    
    def _check_file_inclusion_vulnerabilities(self, service_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check for Local/Remote File Inclusion vulnerabilities"""
        vulnerabilities = []
        service = service_info.get('service', '').lower()
        port = service_info.get('port')
        banner = service_info.get('banner', '').lower()
        
        # Web services vulnerable to file inclusion
        if service in ['http', 'https'] or port in [80, 443, 8080, 8443]:
            vulnerabilities.extend([
                {
                    'name': 'Local File Inclusion (LFI) Risk',
                    'severity': 'high',
                    'description': 'Web application may be vulnerable to local file inclusion attacks',
                    'recommendation': 'Implement file path validation, use whitelisting, disable dangerous functions',
                    'port': port,
                    'service': service
                },
                {
                    'name': 'Remote File Inclusion (RFI) Risk',
                    'severity': 'critical',
                    'description': 'Web application may be vulnerable to remote file inclusion attacks',
                    'recommendation': 'Disable remote file includes, validate URLs, implement strict input filtering',
                    'port': port,
                    'service': service
                },
                {
                    'name': 'Directory Traversal Vulnerability',
                    'severity': 'high',
                    'description': 'Web application may allow directory traversal attacks (../)',
                    'recommendation': 'Implement path canonicalization, input validation, and access controls',
                    'port': port,
                    'service': service
                },
                {
                    'name': 'Malware Upload Risk',
                    'severity': 'high',
                    'description': 'Web application with file upload functionality vulnerable to malware uploads',
                    'recommendation': 'Implement file type validation, antivirus scanning, and sandboxing',
                    'port': port,
                    'service': service
                }
            ])
        
        # FTP services vulnerable to directory traversal
        if service == 'ftp' or port == 21:
            vulnerabilities.append({
                'name': 'FTP Directory Traversal Risk',
                'severity': 'medium',
                'description': 'FTP service may allow directory traversal attacks',
                'recommendation': 'Configure chroot jails, proper access controls, and path restrictions',
                'port': port,
                'service': service
            })
        
        # Check for PHP-specific file inclusion risks
        if 'php' in banner or service in ['http', 'https']:
            vulnerabilities.append({
                'name': 'PHP File Inclusion Vulnerability',
                'severity': 'high',
                'description': 'PHP application may be vulnerable to file inclusion attacks',
                'recommendation': 'Disable allow_url_include, validate file paths, use basename() function',
                'port': port,
                'service': service
            })
        
        return vulnerabilities

    def get_vulnerability_summary(self, vulnerabilities: List[Dict[str, Any]]) -> Dict[str, int]:
        """Get summary of vulnerabilities by severity"""
        summary = {
            'critical': 0,
            'high': 0,
            'medium': 0,
            'low': 0
        }
        
        for vuln in vulnerabilities:
            severity = vuln.get('severity', 'unknown').lower()
            if severity in summary:
                summary[severity] += 1
        
        return summary
